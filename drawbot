#!/usr/bin/python

import serial
import time
import os
import urlparse
from time import strftime, localtime

import string,cgi,time
from os import curdir, sep
from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer



def runFile(file):
    fh = open(file)
    for line in fh.xreadlines():
        sendCommands([line])

def sendCommands(cmds):
    for cmd in cmds:
        arduino.write(cmd + ';')
        while not arduino.read() == '>':
            pass


arduino = serial.Serial('/dev/ttyACM0', 57600, timeout=2)
arduino.open()
time.sleep(3)
while not arduino.read() == '>':
    pass
    
try:
    sendCommands(['CONFIG T100.0 B-100.0 L-95.0 R95.0 I1 J1','TELEPORT X0 Y0 Z0','G91', 'D00 L100', 'D00 R100'])
    sendCommands(['G00 F300 Z90'])
except:
    print "Failed to connect on /dev/ttyACM0"
    exit()


class MyHandler(BaseHTTPRequestHandler):

    def do_GET(self):
        self.send_response(200)

        page = "nothing"
        if not self.path.endswith('html'):
            urlInfo = urlparse.urlparse(self.path)
            self.send_header("Content-type", "text/xml")
            self.end_headers()
            query = urlInfo[4]
            variables = urlparse.parse_qs(query)
            if variables['command'][0] == 'gcode':
                page = "<responseText>{val} {file}</responseText>".format(val=variables['command'][0], file=variables['gcode'][0])
                runFile("/home/pi/gcode/" + variables['gcode'][0])
            else:
                dist=variables['distance'][0]
                command = variables['command'][0]
                page = "<responseText>{val} {dist}mm</responseText>".format(val=command, dist=dist)
                if command == 'up':
                    commands = ['G01 X0.0 Y{vert}'.format(vert=dist)]
                if command == 'down':
                    commands = ['G01 X0.0 Y-{vert}'.format(vert=dist)]
                if command == 'left':
                    commands = ['G01 X-{vert} Y0.0'.format(vert=dist)]
                if command == 'right':
                    commands = ['G01 X{vert} Y0.0'.format(vert=dist)]
                if command == 'reset':
                    commands = ['TELEPORT X0.0 Y0.0']
                sendCommands(commands)

            self.wfile.write(page)

        if self.path.endswith('html'):

            self.send_header('Content-type',    'text/html')
            self.end_headers()
            selectCode = """<select name="gcode">"""
            for dirname, dirnames, filenames in os.walk('/home/pi/gcode'):
                for filename in filenames:
                    selectCode = "{prev} <option>{new}\n".format(prev=selectCode, new=filename)
            
            selectCode = "{prev} </select>".format(prev=selectCode)

            page = """
<script language="javascript" type="text/javascript">

//Browser Support Code
function ajaxFunction(command){
    var ajaxRequest;  // The variable that makes Ajax possible!
    
    try{
        // Opera 8.0+, Firefox, Safari
        ajaxRequest = new XMLHttpRequest();
    } catch (e){
        // Internet Explorer Browsers
        try{
            ajaxRequest = new ActiveXObject("Msxml2.XMLHTTP");
        } catch (e) {
            try{
                ajaxRequest = new ActiveXObject("Microsoft.XMLHTTP");
            } catch (e){
                // Something went wrong
                alert("Your browser broke!");
                return false;
            }
        }
    }

    // Create a function that will receive data sent from the server
    ajaxRequest.onreadystatechange = function(){
        if(ajaxRequest.readyState == 4){
            var txt = ajaxRequest.responseText;
            var parser=new DOMParser();
            var xmlDoc=parser.parseFromString(txt,"text/xml");
    
            document.optionsForm.debugLine.value = ajaxRequest.responseText;
            document.optionsForm.debugLine.value = xmlDoc.getElementsByTagName("responseText")[0].childNodes[0].nodeValue;
        }
    }

    var dist = document.optionsForm.distance.value;
    var gcode = document.optionsForm.gcode.value;

    ajaxRequest.open("GET", "test.php?distance="+dist+"&command="+command+"&gcode="+gcode, true);
    ajaxRequest.send(null); 
}



</script>


<div id="myDiv" name="myDiv" title="Example Div Element" style="position: absolute; top: 0px; left: 0px; width: 200px; background-color: azure;">
<center>
<table>
<tr> <td></td> <td><input type="submit" value="  Up  " onclick="ajaxFunction('up')"></td> <td></td> </tr>
<tr> <td><input type="submit" value="Left" onclick="ajaxFunction('left')"></td> <td><input type="submit" value="Reset" onclick="ajaxFunction('reset')"></td> <td><input type="submit" value="Right" onclick="ajaxFunction('right')"></td> </tr>
<tr> <td></td> <td><input type="submit" value="Down" onclick="ajaxFunction('down')"></td> <td></td> </tr>
</table>
</center>

<form name='optionsForm'>
<input name="distance" type="range"  min="0" max="100" value="50" />
<input type='text' name='debugLine' /> <br />

"""

            self.wfile.write(page + selectCode + """</form> <input name="Draw Gcode" type="submit" value="Draw Gcode" onclick="ajaxFunction('gcode')"> </div>""")

        return
     

    def do_POST(self):
        global rootnode
        try:
            ctype, pdict = cgi.parse_header(self.headers.getheader('content-type'))
            if ctype == 'multipart/form-data':
                query=cgi.parse_multipart(self.rfile, pdict)
            self.send_response(301)
            
            self.end_headers()
            upfilecontent = query.get('upfile')
            print "filecontent", upfilecontent[0]
            self.wfile.write("<HTML>POST OK.<BR><BR>");
            self.wfile.write(upfilecontent[0]);
            
        except :
            pass

def main():

    try:
        server = HTTPServer(('', 80), MyHandler)
        print 'started httpserver...'
        server.serve_forever()


    except KeyboardInterrupt:
        print '^C received, shutting down server'
        server.socket.close()

if __name__ == '__main__':
    main()



